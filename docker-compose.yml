
x-airflow-environment: &airflow-environment
  environment:
    - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/maindb
    - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
    - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__WEBSERVER__SECRET_KEY}
    - PYTHONPATH=/opt/airflow
    - S3_BUCKET=${S3_BUCKET}
    - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    - DB_HOST=postgres
    - DB_NAME=maindb
    - DB_USER=${DB_USER}
    - DB_PASSWORD=${DB_PASSWORD}
    - DB_PORT=5432

services:
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=maindb
    ports:
      - "5432:5432"
    networks:
      - local-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d maindb"]
      interval: 5s
      timeout: 5s
      retries: 5

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - DEBUG=1
    networks:
      - local-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - ./config/servers.json:/pgadmin4/servers.json
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - local-network

  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jupyter
    depends_on:
      localstack:
        condition: service_started
    ports:
      - "8888:8888"
    volumes:
      - ./src:/opt/airflow/src
      - ./local-raw-data:/opt/airflow/local-raw-data
      - ./notebooks:/opt/airflow/notebooks
    <<: *airflow-environment
    command: >
      bash -c "jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''"
    networks:
      - local-network

  s3-setup:
    image: amazon/aws-cli:latest # Use the official AWS CLI image
    container_name: s3-setup
    depends_on:
      localstack:
        condition: service_started # Wait for LocalStack to start
    volumes:
      # Mount our local raw data folder to a path inside the container
      - ./data:/data/raw-data 
      # Mount the script to a path inside the container
      - ./scripts/setup_s3.sh:/app/setup_s3.sh
    entrypoint: /bin/bash
    command: /app/setup_s3.sh
    environment:
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    networks:
      - local-network

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
      s3-setup:
        condition: service_completed_successfully
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init && \
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin
    <<: *airflow-environment
    networks:
      - local-network

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      s3-setup:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./data:/opt/airflow/data
    <<: *airflow-environment
    command: airflow webserver
    networks:
      - local-network

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      s3-setup:
        condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./data:/opt/airflow/data
    <<: *airflow-environment
    command: airflow scheduler
    networks:
      - local-network

  airflow-triggerer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-triggerer
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      s3-setup:
        condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
    <<: *airflow-environment
    command: triggerer
    networks:
      - local-network

volumes:
  pgadmin-data:

networks:
  local-network:
    name: aws_etl_project_local-network